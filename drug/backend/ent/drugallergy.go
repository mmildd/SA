// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/mmildd_s/app/ent/doctor"
	"github.com/mmildd_s/app/ent/drugallergy"
	"github.com/mmildd_s/app/ent/manner"
	"github.com/mmildd_s/app/ent/medicine"
	"github.com/mmildd_s/app/ent/patient"
)

// DrugAllergy is the model entity for the DrugAllergy schema.
type DrugAllergy struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DrugAllergyQuery when eager-loading is set.
	Edges       DrugAllergyEdges `json:"edges"`
	doctor_id   *int
	manner_id   *int
	medicine_id *int
	patient_id  *int
}

// DrugAllergyEdges holds the relations/edges for other nodes in the graph.
type DrugAllergyEdges struct {
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Medicine holds the value of the medicine edge.
	Medicine *Medicine
	// Manner holds the value of the manner edge.
	Manner *Manner
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugAllergyEdges) DoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[0] {
		if e.Doctor == nil {
			// The edge doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.Doctor, nil
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugAllergyEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[1] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// MedicineOrErr returns the Medicine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugAllergyEdges) MedicineOrErr() (*Medicine, error) {
	if e.loadedTypes[2] {
		if e.Medicine == nil {
			// The edge medicine was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: medicine.Label}
		}
		return e.Medicine, nil
	}
	return nil, &NotLoadedError{edge: "medicine"}
}

// MannerOrErr returns the Manner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DrugAllergyEdges) MannerOrErr() (*Manner, error) {
	if e.loadedTypes[3] {
		if e.Manner == nil {
			// The edge manner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: manner.Label}
		}
		return e.Manner, nil
	}
	return nil, &NotLoadedError{edge: "manner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DrugAllergy) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DrugAllergy) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // doctor_id
		&sql.NullInt64{}, // manner_id
		&sql.NullInt64{}, // medicine_id
		&sql.NullInt64{}, // patient_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DrugAllergy fields.
func (da *DrugAllergy) assignValues(values ...interface{}) error {
	if m, n := len(values), len(drugallergy.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	da.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(drugallergy.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field doctor_id", value)
		} else if value.Valid {
			da.doctor_id = new(int)
			*da.doctor_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field manner_id", value)
		} else if value.Valid {
			da.manner_id = new(int)
			*da.manner_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field medicine_id", value)
		} else if value.Valid {
			da.medicine_id = new(int)
			*da.medicine_id = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_id", value)
		} else if value.Valid {
			da.patient_id = new(int)
			*da.patient_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDoctor queries the doctor edge of the DrugAllergy.
func (da *DrugAllergy) QueryDoctor() *DoctorQuery {
	return (&DrugAllergyClient{config: da.config}).QueryDoctor(da)
}

// QueryPatient queries the patient edge of the DrugAllergy.
func (da *DrugAllergy) QueryPatient() *PatientQuery {
	return (&DrugAllergyClient{config: da.config}).QueryPatient(da)
}

// QueryMedicine queries the medicine edge of the DrugAllergy.
func (da *DrugAllergy) QueryMedicine() *MedicineQuery {
	return (&DrugAllergyClient{config: da.config}).QueryMedicine(da)
}

// QueryManner queries the manner edge of the DrugAllergy.
func (da *DrugAllergy) QueryManner() *MannerQuery {
	return (&DrugAllergyClient{config: da.config}).QueryManner(da)
}

// Update returns a builder for updating this DrugAllergy.
// Note that, you need to call DrugAllergy.Unwrap() before calling this method, if this DrugAllergy
// was returned from a transaction, and the transaction was committed or rolled back.
func (da *DrugAllergy) Update() *DrugAllergyUpdateOne {
	return (&DrugAllergyClient{config: da.config}).UpdateOne(da)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (da *DrugAllergy) Unwrap() *DrugAllergy {
	tx, ok := da.config.driver.(*txDriver)
	if !ok {
		panic("ent: DrugAllergy is not a transactional entity")
	}
	da.config.driver = tx.drv
	return da
}

// String implements the fmt.Stringer.
func (da *DrugAllergy) String() string {
	var builder strings.Builder
	builder.WriteString("DrugAllergy(")
	builder.WriteString(fmt.Sprintf("id=%v", da.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DrugAllergies is a parsable slice of DrugAllergy.
type DrugAllergies []*DrugAllergy

func (da DrugAllergies) config(cfg config) {
	for _i := range da {
		da[_i].config = cfg
	}
}
