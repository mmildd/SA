// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/mmildd_s/app/ent/migrate"

	"github.com/mmildd_s/app/ent/doctor"
	"github.com/mmildd_s/app/ent/drugallergy"
	"github.com/mmildd_s/app/ent/manner"
	"github.com/mmildd_s/app/ent/medicine"
	"github.com/mmildd_s/app/ent/patient"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// DrugAllergy is the client for interacting with the DrugAllergy builders.
	DrugAllergy *DrugAllergyClient
	// Manner is the client for interacting with the Manner builders.
	Manner *MannerClient
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Doctor = NewDoctorClient(c.config)
	c.DrugAllergy = NewDrugAllergyClient(c.config)
	c.Manner = NewMannerClient(c.config)
	c.Medicine = NewMedicineClient(c.config)
	c.Patient = NewPatientClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Doctor:      NewDoctorClient(cfg),
		DrugAllergy: NewDrugAllergyClient(cfg),
		Manner:      NewMannerClient(cfg),
		Medicine:    NewMedicineClient(cfg),
		Patient:     NewPatientClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:      cfg,
		Doctor:      NewDoctorClient(cfg),
		DrugAllergy: NewDrugAllergyClient(cfg),
		Manner:      NewMannerClient(cfg),
		Medicine:    NewMedicineClient(cfg),
		Patient:     NewPatientClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Doctor.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Doctor.Use(hooks...)
	c.DrugAllergy.Use(hooks...)
	c.Manner.Use(hooks...)
	c.Medicine.Use(hooks...)
	c.Patient.Use(hooks...)
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Create returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDoctorDrugAllergy queries the Doctor_DrugAllergy edge of a Doctor.
func (c *DoctorClient) QueryDoctorDrugAllergy(d *Doctor) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorDrugAllergyTable, doctor.DoctorDrugAllergyColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// DrugAllergyClient is a client for the DrugAllergy schema.
type DrugAllergyClient struct {
	config
}

// NewDrugAllergyClient returns a client for the DrugAllergy from the given config.
func NewDrugAllergyClient(c config) *DrugAllergyClient {
	return &DrugAllergyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `drugallergy.Hooks(f(g(h())))`.
func (c *DrugAllergyClient) Use(hooks ...Hook) {
	c.hooks.DrugAllergy = append(c.hooks.DrugAllergy, hooks...)
}

// Create returns a create builder for DrugAllergy.
func (c *DrugAllergyClient) Create() *DrugAllergyCreate {
	mutation := newDrugAllergyMutation(c.config, OpCreate)
	return &DrugAllergyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for DrugAllergy.
func (c *DrugAllergyClient) Update() *DrugAllergyUpdate {
	mutation := newDrugAllergyMutation(c.config, OpUpdate)
	return &DrugAllergyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DrugAllergyClient) UpdateOne(da *DrugAllergy) *DrugAllergyUpdateOne {
	mutation := newDrugAllergyMutation(c.config, OpUpdateOne, withDrugAllergy(da))
	return &DrugAllergyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DrugAllergyClient) UpdateOneID(id int) *DrugAllergyUpdateOne {
	mutation := newDrugAllergyMutation(c.config, OpUpdateOne, withDrugAllergyID(id))
	return &DrugAllergyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DrugAllergy.
func (c *DrugAllergyClient) Delete() *DrugAllergyDelete {
	mutation := newDrugAllergyMutation(c.config, OpDelete)
	return &DrugAllergyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DrugAllergyClient) DeleteOne(da *DrugAllergy) *DrugAllergyDeleteOne {
	return c.DeleteOneID(da.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DrugAllergyClient) DeleteOneID(id int) *DrugAllergyDeleteOne {
	builder := c.Delete().Where(drugallergy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DrugAllergyDeleteOne{builder}
}

// Create returns a query builder for DrugAllergy.
func (c *DrugAllergyClient) Query() *DrugAllergyQuery {
	return &DrugAllergyQuery{config: c.config}
}

// Get returns a DrugAllergy entity by its id.
func (c *DrugAllergyClient) Get(ctx context.Context, id int) (*DrugAllergy, error) {
	return c.Query().Where(drugallergy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DrugAllergyClient) GetX(ctx context.Context, id int) *DrugAllergy {
	da, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return da
}

// QueryDoctor queries the doctor edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryDoctor(da *DrugAllergy) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.DoctorTable, drugallergy.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryPatient(da *DrugAllergy) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.PatientTable, drugallergy.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMedicine queries the medicine edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryMedicine(da *DrugAllergy) *MedicineQuery {
	query := &MedicineQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.MedicineTable, drugallergy.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManner queries the manner edge of a DrugAllergy.
func (c *DrugAllergyClient) QueryManner(da *DrugAllergy) *MannerQuery {
	query := &MannerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := da.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(drugallergy.Table, drugallergy.FieldID, id),
			sqlgraph.To(manner.Table, manner.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, drugallergy.MannerTable, drugallergy.MannerColumn),
		)
		fromV = sqlgraph.Neighbors(da.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DrugAllergyClient) Hooks() []Hook {
	return c.hooks.DrugAllergy
}

// MannerClient is a client for the Manner schema.
type MannerClient struct {
	config
}

// NewMannerClient returns a client for the Manner from the given config.
func NewMannerClient(c config) *MannerClient {
	return &MannerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manner.Hooks(f(g(h())))`.
func (c *MannerClient) Use(hooks ...Hook) {
	c.hooks.Manner = append(c.hooks.Manner, hooks...)
}

// Create returns a create builder for Manner.
func (c *MannerClient) Create() *MannerCreate {
	mutation := newMannerMutation(c.config, OpCreate)
	return &MannerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Manner.
func (c *MannerClient) Update() *MannerUpdate {
	mutation := newMannerMutation(c.config, OpUpdate)
	return &MannerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MannerClient) UpdateOne(m *Manner) *MannerUpdateOne {
	mutation := newMannerMutation(c.config, OpUpdateOne, withManner(m))
	return &MannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MannerClient) UpdateOneID(id int) *MannerUpdateOne {
	mutation := newMannerMutation(c.config, OpUpdateOne, withMannerID(id))
	return &MannerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manner.
func (c *MannerClient) Delete() *MannerDelete {
	mutation := newMannerMutation(c.config, OpDelete)
	return &MannerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MannerClient) DeleteOne(m *Manner) *MannerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MannerClient) DeleteOneID(id int) *MannerDeleteOne {
	builder := c.Delete().Where(manner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MannerDeleteOne{builder}
}

// Create returns a query builder for Manner.
func (c *MannerClient) Query() *MannerQuery {
	return &MannerQuery{config: c.config}
}

// Get returns a Manner entity by its id.
func (c *MannerClient) Get(ctx context.Context, id int) (*Manner, error) {
	return c.Query().Where(manner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MannerClient) GetX(ctx context.Context, id int) *Manner {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMannerDrugAllergy queries the Manner_DrugAllergy edge of a Manner.
func (c *MannerClient) QueryMannerDrugAllergy(m *Manner) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manner.Table, manner.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, manner.MannerDrugAllergyTable, manner.MannerDrugAllergyColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MannerClient) Hooks() []Hook {
	return c.hooks.Manner
}

// MedicineClient is a client for the Medicine schema.
type MedicineClient struct {
	config
}

// NewMedicineClient returns a client for the Medicine from the given config.
func NewMedicineClient(c config) *MedicineClient {
	return &MedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicine.Hooks(f(g(h())))`.
func (c *MedicineClient) Use(hooks ...Hook) {
	c.hooks.Medicine = append(c.hooks.Medicine, hooks...)
}

// Create returns a create builder for Medicine.
func (c *MedicineClient) Create() *MedicineCreate {
	mutation := newMedicineMutation(c.config, OpCreate)
	return &MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Medicine.
func (c *MedicineClient) Update() *MedicineUpdate {
	mutation := newMedicineMutation(c.config, OpUpdate)
	return &MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineClient) UpdateOne(m *Medicine) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicine(m))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineClient) UpdateOneID(id int) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicineID(id))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicine.
func (c *MedicineClient) Delete() *MedicineDelete {
	mutation := newMedicineMutation(c.config, OpDelete)
	return &MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicineClient) DeleteOne(m *Medicine) *MedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicineClient) DeleteOneID(id int) *MedicineDeleteOne {
	builder := c.Delete().Where(medicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineDeleteOne{builder}
}

// Create returns a query builder for Medicine.
func (c *MedicineClient) Query() *MedicineQuery {
	return &MedicineQuery{config: c.config}
}

// Get returns a Medicine entity by its id.
func (c *MedicineClient) Get(ctx context.Context, id int) (*Medicine, error) {
	return c.Query().Where(medicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineClient) GetX(ctx context.Context, id int) *Medicine {
	m, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return m
}

// QueryMedicineDrugAllergy queries the Medicine_DrugAllergy edge of a Medicine.
func (c *MedicineClient) QueryMedicineDrugAllergy(m *Medicine) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicine.MedicineDrugAllergyTable, medicine.MedicineDrugAllergyColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicineClient) Hooks() []Hook {
	return c.hooks.Medicine
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Create returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	pa, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pa
}

// QueryPatientDrugAllergy queries the Patient_DrugAllergy edge of a Patient.
func (c *PatientClient) QueryPatientDrugAllergy(pa *Patient) *DrugAllergyQuery {
	query := &DrugAllergyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(drugallergy.Table, drugallergy.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientDrugAllergyTable, patient.PatientDrugAllergyColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}
