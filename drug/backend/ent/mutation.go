// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/mmildd_s/app/ent/doctor"
	"github.com/mmildd_s/app/ent/drugallergy"
	"github.com/mmildd_s/app/ent/manner"
	"github.com/mmildd_s/app/ent/medicine"
	"github.com/mmildd_s/app/ent/patient"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDoctor      = "Doctor"
	TypeDrugAllergy = "DrugAllergy"
	TypeManner      = "Manner"
	TypeMedicine    = "Medicine"
	TypePatient     = "Patient"
)

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Doctor_Email              *string
	_Doctor_Password           *string
	_Doctor_Name               *string
	_Doctor_Tel                *string
	clearedFields              map[string]struct{}
	_Doctor_DrugAllergy        map[int]struct{}
	removed_Doctor_DrugAllergy map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorEmail sets the Doctor_Email field.
func (m *DoctorMutation) SetDoctorEmail(s string) {
	m._Doctor_Email = &s
}

// DoctorEmail returns the Doctor_Email value in the mutation.
func (m *DoctorMutation) DoctorEmail() (r string, exists bool) {
	v := m._Doctor_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old Doctor_Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "Doctor_Email" field.
func (m *DoctorMutation) ResetDoctorEmail() {
	m._Doctor_Email = nil
}

// SetDoctorPassword sets the Doctor_Password field.
func (m *DoctorMutation) SetDoctorPassword(s string) {
	m._Doctor_Password = &s
}

// DoctorPassword returns the Doctor_Password value in the mutation.
func (m *DoctorMutation) DoctorPassword() (r string, exists bool) {
	v := m._Doctor_Password
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorPassword returns the old Doctor_Password value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorPassword: %w", err)
	}
	return oldValue.DoctorPassword, nil
}

// ResetDoctorPassword reset all changes of the "Doctor_Password" field.
func (m *DoctorMutation) ResetDoctorPassword() {
	m._Doctor_Password = nil
}

// SetDoctorName sets the Doctor_Name field.
func (m *DoctorMutation) SetDoctorName(s string) {
	m._Doctor_Name = &s
}

// DoctorName returns the Doctor_Name value in the mutation.
func (m *DoctorMutation) DoctorName() (r string, exists bool) {
	v := m._Doctor_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old Doctor_Name value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "Doctor_Name" field.
func (m *DoctorMutation) ResetDoctorName() {
	m._Doctor_Name = nil
}

// SetDoctorTel sets the Doctor_Tel field.
func (m *DoctorMutation) SetDoctorTel(s string) {
	m._Doctor_Tel = &s
}

// DoctorTel returns the Doctor_Tel value in the mutation.
func (m *DoctorMutation) DoctorTel() (r string, exists bool) {
	v := m._Doctor_Tel
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorTel returns the old Doctor_Tel value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorTel: %w", err)
	}
	return oldValue.DoctorTel, nil
}

// ResetDoctorTel reset all changes of the "Doctor_Tel" field.
func (m *DoctorMutation) ResetDoctorTel() {
	m._Doctor_Tel = nil
}

// AddDoctorDrugAllergyIDs adds the Doctor_DrugAllergy edge to DrugAllergy by ids.
func (m *DoctorMutation) AddDoctorDrugAllergyIDs(ids ...int) {
	if m._Doctor_DrugAllergy == nil {
		m._Doctor_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m._Doctor_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemoveDoctorDrugAllergyIDs removes the Doctor_DrugAllergy edge to DrugAllergy by ids.
func (m *DoctorMutation) RemoveDoctorDrugAllergyIDs(ids ...int) {
	if m.removed_Doctor_DrugAllergy == nil {
		m.removed_Doctor_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Doctor_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemovedDoctorDrugAllergy returns the removed ids of Doctor_DrugAllergy.
func (m *DoctorMutation) RemovedDoctorDrugAllergyIDs() (ids []int) {
	for id := range m.removed_Doctor_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// DoctorDrugAllergyIDs returns the Doctor_DrugAllergy ids in the mutation.
func (m *DoctorMutation) DoctorDrugAllergyIDs() (ids []int) {
	for id := range m._Doctor_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// ResetDoctorDrugAllergy reset all changes of the "Doctor_DrugAllergy" edge.
func (m *DoctorMutation) ResetDoctorDrugAllergy() {
	m._Doctor_DrugAllergy = nil
	m.removed_Doctor_DrugAllergy = nil
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Doctor_Email != nil {
		fields = append(fields, doctor.FieldDoctorEmail)
	}
	if m._Doctor_Password != nil {
		fields = append(fields, doctor.FieldDoctorPassword)
	}
	if m._Doctor_Name != nil {
		fields = append(fields, doctor.FieldDoctorName)
	}
	if m._Doctor_Tel != nil {
		fields = append(fields, doctor.FieldDoctorTel)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldDoctorEmail:
		return m.DoctorEmail()
	case doctor.FieldDoctorPassword:
		return m.DoctorPassword()
	case doctor.FieldDoctorName:
		return m.DoctorName()
	case doctor.FieldDoctorTel:
		return m.DoctorTel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	case doctor.FieldDoctorPassword:
		return m.OldDoctorPassword(ctx)
	case doctor.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case doctor.FieldDoctorTel:
		return m.OldDoctorTel(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	case doctor.FieldDoctorPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorPassword(v)
		return nil
	case doctor.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case doctor.FieldDoctorTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorTel(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	case doctor.FieldDoctorPassword:
		m.ResetDoctorPassword()
		return nil
	case doctor.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case doctor.FieldDoctorTel:
		m.ResetDoctorTel()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Doctor_DrugAllergy != nil {
		edges = append(edges, doctor.EdgeDoctorDrugAllergy)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDrugAllergy:
		ids := make([]ent.Value, 0, len(m._Doctor_DrugAllergy))
		for id := range m._Doctor_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Doctor_DrugAllergy != nil {
		edges = append(edges, doctor.EdgeDoctorDrugAllergy)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorDrugAllergy:
		ids := make([]ent.Value, 0, len(m.removed_Doctor_DrugAllergy))
		for id := range m.removed_Doctor_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeDoctorDrugAllergy:
		m.ResetDoctorDrugAllergy()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// DrugAllergyMutation represents an operation that mutate the DrugAllergies
// nodes in the graph.
type DrugAllergyMutation struct {
	config
	op              Op
	typ             string
	id              *int
	clearedFields   map[string]struct{}
	doctor          *int
	cleareddoctor   bool
	patient         *int
	clearedpatient  bool
	medicine        *int
	clearedmedicine bool
	manner          *int
	clearedmanner   bool
	done            bool
	oldValue        func(context.Context) (*DrugAllergy, error)
}

var _ ent.Mutation = (*DrugAllergyMutation)(nil)

// drugallergyOption allows to manage the mutation configuration using functional options.
type drugallergyOption func(*DrugAllergyMutation)

// newDrugAllergyMutation creates new mutation for $n.Name.
func newDrugAllergyMutation(c config, op Op, opts ...drugallergyOption) *DrugAllergyMutation {
	m := &DrugAllergyMutation{
		config:        c,
		op:            op,
		typ:           TypeDrugAllergy,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugAllergyID sets the id field of the mutation.
func withDrugAllergyID(id int) drugallergyOption {
	return func(m *DrugAllergyMutation) {
		var (
			err   error
			once  sync.Once
			value *DrugAllergy
		)
		m.oldValue = func(ctx context.Context) (*DrugAllergy, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DrugAllergy.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrugAllergy sets the old DrugAllergy of the mutation.
func withDrugAllergy(node *DrugAllergy) drugallergyOption {
	return func(m *DrugAllergyMutation) {
		m.oldValue = func(context.Context) (*DrugAllergy, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugAllergyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugAllergyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugAllergyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (m *DrugAllergyMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to Doctor.
func (m *DrugAllergyMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *DrugAllergyMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *DrugAllergyMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *DrugAllergyMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *DrugAllergyMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DrugAllergyMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DrugAllergyMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DrugAllergyMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DrugAllergyMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DrugAllergyMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DrugAllergyMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetMedicineID sets the medicine edge to Medicine by id.
func (m *DrugAllergyMutation) SetMedicineID(id int) {
	m.medicine = &id
}

// ClearMedicine clears the medicine edge to Medicine.
func (m *DrugAllergyMutation) ClearMedicine() {
	m.clearedmedicine = true
}

// MedicineCleared returns if the edge medicine was cleared.
func (m *DrugAllergyMutation) MedicineCleared() bool {
	return m.clearedmedicine
}

// MedicineID returns the medicine id in the mutation.
func (m *DrugAllergyMutation) MedicineID() (id int, exists bool) {
	if m.medicine != nil {
		return *m.medicine, true
	}
	return
}

// MedicineIDs returns the medicine ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MedicineID instead. It exists only for internal usage by the builders.
func (m *DrugAllergyMutation) MedicineIDs() (ids []int) {
	if id := m.medicine; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMedicine reset all changes of the "medicine" edge.
func (m *DrugAllergyMutation) ResetMedicine() {
	m.medicine = nil
	m.clearedmedicine = false
}

// SetMannerID sets the manner edge to Manner by id.
func (m *DrugAllergyMutation) SetMannerID(id int) {
	m.manner = &id
}

// ClearManner clears the manner edge to Manner.
func (m *DrugAllergyMutation) ClearManner() {
	m.clearedmanner = true
}

// MannerCleared returns if the edge manner was cleared.
func (m *DrugAllergyMutation) MannerCleared() bool {
	return m.clearedmanner
}

// MannerID returns the manner id in the mutation.
func (m *DrugAllergyMutation) MannerID() (id int, exists bool) {
	if m.manner != nil {
		return *m.manner, true
	}
	return
}

// MannerIDs returns the manner ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// MannerID instead. It exists only for internal usage by the builders.
func (m *DrugAllergyMutation) MannerIDs() (ids []int) {
	if id := m.manner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManner reset all changes of the "manner" edge.
func (m *DrugAllergyMutation) ResetManner() {
	m.manner = nil
	m.clearedmanner = false
}

// Op returns the operation name.
func (m *DrugAllergyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DrugAllergy).
func (m *DrugAllergyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugAllergyMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugAllergyMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugAllergyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown DrugAllergy field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugAllergyMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DrugAllergy field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugAllergyMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugAllergyMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugAllergyMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown DrugAllergy numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugAllergyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugAllergyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugAllergyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DrugAllergy nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugAllergyMutation) ResetField(name string) error {
	return fmt.Errorf("unknown DrugAllergy field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugAllergyMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.doctor != nil {
		edges = append(edges, drugallergy.EdgeDoctor)
	}
	if m.patient != nil {
		edges = append(edges, drugallergy.EdgePatient)
	}
	if m.medicine != nil {
		edges = append(edges, drugallergy.EdgeMedicine)
	}
	if m.manner != nil {
		edges = append(edges, drugallergy.EdgeManner)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugAllergyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drugallergy.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	case drugallergy.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case drugallergy.EdgeMedicine:
		if id := m.medicine; id != nil {
			return []ent.Value{*id}
		}
	case drugallergy.EdgeManner:
		if id := m.manner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugAllergyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugAllergyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugAllergyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddoctor {
		edges = append(edges, drugallergy.EdgeDoctor)
	}
	if m.clearedpatient {
		edges = append(edges, drugallergy.EdgePatient)
	}
	if m.clearedmedicine {
		edges = append(edges, drugallergy.EdgeMedicine)
	}
	if m.clearedmanner {
		edges = append(edges, drugallergy.EdgeManner)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugAllergyMutation) EdgeCleared(name string) bool {
	switch name {
	case drugallergy.EdgeDoctor:
		return m.cleareddoctor
	case drugallergy.EdgePatient:
		return m.clearedpatient
	case drugallergy.EdgeMedicine:
		return m.clearedmedicine
	case drugallergy.EdgeManner:
		return m.clearedmanner
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugAllergyMutation) ClearEdge(name string) error {
	switch name {
	case drugallergy.EdgeDoctor:
		m.ClearDoctor()
		return nil
	case drugallergy.EdgePatient:
		m.ClearPatient()
		return nil
	case drugallergy.EdgeMedicine:
		m.ClearMedicine()
		return nil
	case drugallergy.EdgeManner:
		m.ClearManner()
		return nil
	}
	return fmt.Errorf("unknown DrugAllergy unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugAllergyMutation) ResetEdge(name string) error {
	switch name {
	case drugallergy.EdgeDoctor:
		m.ResetDoctor()
		return nil
	case drugallergy.EdgePatient:
		m.ResetPatient()
		return nil
	case drugallergy.EdgeMedicine:
		m.ResetMedicine()
		return nil
	case drugallergy.EdgeManner:
		m.ResetManner()
		return nil
	}
	return fmt.Errorf("unknown DrugAllergy edge %s", name)
}

// MannerMutation represents an operation that mutate the Manners
// nodes in the graph.
type MannerMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Manner_Name               *string
	clearedFields              map[string]struct{}
	_Manner_DrugAllergy        map[int]struct{}
	removed_Manner_DrugAllergy map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Manner, error)
}

var _ ent.Mutation = (*MannerMutation)(nil)

// mannerOption allows to manage the mutation configuration using functional options.
type mannerOption func(*MannerMutation)

// newMannerMutation creates new mutation for $n.Name.
func newMannerMutation(c config, op Op, opts ...mannerOption) *MannerMutation {
	m := &MannerMutation{
		config:        c,
		op:            op,
		typ:           TypeManner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMannerID sets the id field of the mutation.
func withMannerID(id int) mannerOption {
	return func(m *MannerMutation) {
		var (
			err   error
			once  sync.Once
			value *Manner
		)
		m.oldValue = func(ctx context.Context) (*Manner, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Manner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManner sets the old Manner of the mutation.
func withManner(node *Manner) mannerOption {
	return func(m *MannerMutation) {
		m.oldValue = func(context.Context) (*Manner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MannerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MannerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MannerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMannerName sets the Manner_Name field.
func (m *MannerMutation) SetMannerName(s string) {
	m._Manner_Name = &s
}

// MannerName returns the Manner_Name value in the mutation.
func (m *MannerMutation) MannerName() (r string, exists bool) {
	v := m._Manner_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldMannerName returns the old Manner_Name value of the Manner.
// If the Manner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MannerMutation) OldMannerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMannerName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMannerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMannerName: %w", err)
	}
	return oldValue.MannerName, nil
}

// ResetMannerName reset all changes of the "Manner_Name" field.
func (m *MannerMutation) ResetMannerName() {
	m._Manner_Name = nil
}

// AddMannerDrugAllergyIDs adds the Manner_DrugAllergy edge to DrugAllergy by ids.
func (m *MannerMutation) AddMannerDrugAllergyIDs(ids ...int) {
	if m._Manner_DrugAllergy == nil {
		m._Manner_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m._Manner_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemoveMannerDrugAllergyIDs removes the Manner_DrugAllergy edge to DrugAllergy by ids.
func (m *MannerMutation) RemoveMannerDrugAllergyIDs(ids ...int) {
	if m.removed_Manner_DrugAllergy == nil {
		m.removed_Manner_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Manner_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemovedMannerDrugAllergy returns the removed ids of Manner_DrugAllergy.
func (m *MannerMutation) RemovedMannerDrugAllergyIDs() (ids []int) {
	for id := range m.removed_Manner_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// MannerDrugAllergyIDs returns the Manner_DrugAllergy ids in the mutation.
func (m *MannerMutation) MannerDrugAllergyIDs() (ids []int) {
	for id := range m._Manner_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// ResetMannerDrugAllergy reset all changes of the "Manner_DrugAllergy" edge.
func (m *MannerMutation) ResetMannerDrugAllergy() {
	m._Manner_DrugAllergy = nil
	m.removed_Manner_DrugAllergy = nil
}

// Op returns the operation name.
func (m *MannerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Manner).
func (m *MannerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MannerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Manner_Name != nil {
		fields = append(fields, manner.FieldMannerName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MannerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manner.FieldMannerName:
		return m.MannerName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MannerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manner.FieldMannerName:
		return m.OldMannerName(ctx)
	}
	return nil, fmt.Errorf("unknown Manner field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MannerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manner.FieldMannerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMannerName(v)
		return nil
	}
	return fmt.Errorf("unknown Manner field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MannerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MannerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MannerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Manner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MannerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MannerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MannerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Manner nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MannerMutation) ResetField(name string) error {
	switch name {
	case manner.FieldMannerName:
		m.ResetMannerName()
		return nil
	}
	return fmt.Errorf("unknown Manner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MannerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Manner_DrugAllergy != nil {
		edges = append(edges, manner.EdgeMannerDrugAllergy)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MannerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case manner.EdgeMannerDrugAllergy:
		ids := make([]ent.Value, 0, len(m._Manner_DrugAllergy))
		for id := range m._Manner_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MannerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Manner_DrugAllergy != nil {
		edges = append(edges, manner.EdgeMannerDrugAllergy)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MannerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case manner.EdgeMannerDrugAllergy:
		ids := make([]ent.Value, 0, len(m.removed_Manner_DrugAllergy))
		for id := range m.removed_Manner_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MannerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MannerMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MannerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Manner unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MannerMutation) ResetEdge(name string) error {
	switch name {
	case manner.EdgeMannerDrugAllergy:
		m.ResetMannerDrugAllergy()
		return nil
	}
	return fmt.Errorf("unknown Manner edge %s", name)
}

// MedicineMutation represents an operation that mutate the Medicines
// nodes in the graph.
type MedicineMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	_Medicine_Name               *string
	clearedFields                map[string]struct{}
	_Medicine_DrugAllergy        map[int]struct{}
	removed_Medicine_DrugAllergy map[int]struct{}
	done                         bool
	oldValue                     func(context.Context) (*Medicine, error)
}

var _ ent.Mutation = (*MedicineMutation)(nil)

// medicineOption allows to manage the mutation configuration using functional options.
type medicineOption func(*MedicineMutation)

// newMedicineMutation creates new mutation for $n.Name.
func newMedicineMutation(c config, op Op, opts ...medicineOption) *MedicineMutation {
	m := &MedicineMutation{
		config:        c,
		op:            op,
		typ:           TypeMedicine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMedicineID sets the id field of the mutation.
func withMedicineID(id int) medicineOption {
	return func(m *MedicineMutation) {
		var (
			err   error
			once  sync.Once
			value *Medicine
		)
		m.oldValue = func(ctx context.Context) (*Medicine, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Medicine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMedicine sets the old Medicine of the mutation.
func withMedicine(node *Medicine) medicineOption {
	return func(m *MedicineMutation) {
		m.oldValue = func(context.Context) (*Medicine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MedicineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MedicineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MedicineMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMedicineName sets the Medicine_Name field.
func (m *MedicineMutation) SetMedicineName(s string) {
	m._Medicine_Name = &s
}

// MedicineName returns the Medicine_Name value in the mutation.
func (m *MedicineMutation) MedicineName() (r string, exists bool) {
	v := m._Medicine_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicineName returns the old Medicine_Name value of the Medicine.
// If the Medicine object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MedicineMutation) OldMedicineName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMedicineName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMedicineName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicineName: %w", err)
	}
	return oldValue.MedicineName, nil
}

// ResetMedicineName reset all changes of the "Medicine_Name" field.
func (m *MedicineMutation) ResetMedicineName() {
	m._Medicine_Name = nil
}

// AddMedicineDrugAllergyIDs adds the Medicine_DrugAllergy edge to DrugAllergy by ids.
func (m *MedicineMutation) AddMedicineDrugAllergyIDs(ids ...int) {
	if m._Medicine_DrugAllergy == nil {
		m._Medicine_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m._Medicine_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemoveMedicineDrugAllergyIDs removes the Medicine_DrugAllergy edge to DrugAllergy by ids.
func (m *MedicineMutation) RemoveMedicineDrugAllergyIDs(ids ...int) {
	if m.removed_Medicine_DrugAllergy == nil {
		m.removed_Medicine_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Medicine_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemovedMedicineDrugAllergy returns the removed ids of Medicine_DrugAllergy.
func (m *MedicineMutation) RemovedMedicineDrugAllergyIDs() (ids []int) {
	for id := range m.removed_Medicine_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// MedicineDrugAllergyIDs returns the Medicine_DrugAllergy ids in the mutation.
func (m *MedicineMutation) MedicineDrugAllergyIDs() (ids []int) {
	for id := range m._Medicine_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// ResetMedicineDrugAllergy reset all changes of the "Medicine_DrugAllergy" edge.
func (m *MedicineMutation) ResetMedicineDrugAllergy() {
	m._Medicine_DrugAllergy = nil
	m.removed_Medicine_DrugAllergy = nil
}

// Op returns the operation name.
func (m *MedicineMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Medicine).
func (m *MedicineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MedicineMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Medicine_Name != nil {
		fields = append(fields, medicine.FieldMedicineName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MedicineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case medicine.FieldMedicineName:
		return m.MedicineName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MedicineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case medicine.FieldMedicineName:
		return m.OldMedicineName(ctx)
	}
	return nil, fmt.Errorf("unknown Medicine field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case medicine.FieldMedicineName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicineName(v)
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MedicineMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MedicineMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MedicineMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MedicineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MedicineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MedicineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Medicine nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MedicineMutation) ResetField(name string) error {
	switch name {
	case medicine.FieldMedicineName:
		m.ResetMedicineName()
		return nil
	}
	return fmt.Errorf("unknown Medicine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MedicineMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Medicine_DrugAllergy != nil {
		edges = append(edges, medicine.EdgeMedicineDrugAllergy)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MedicineMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case medicine.EdgeMedicineDrugAllergy:
		ids := make([]ent.Value, 0, len(m._Medicine_DrugAllergy))
		for id := range m._Medicine_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MedicineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Medicine_DrugAllergy != nil {
		edges = append(edges, medicine.EdgeMedicineDrugAllergy)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MedicineMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case medicine.EdgeMedicineDrugAllergy:
		ids := make([]ent.Value, 0, len(m.removed_Medicine_DrugAllergy))
		for id := range m.removed_Medicine_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MedicineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MedicineMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MedicineMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Medicine unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MedicineMutation) ResetEdge(name string) error {
	switch name {
	case medicine.EdgeMedicineDrugAllergy:
		m.ResetMedicineDrugAllergy()
		return nil
	}
	return fmt.Errorf("unknown Medicine edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	_Patient_Name               *string
	clearedFields               map[string]struct{}
	_Patient_DrugAllergy        map[int]struct{}
	removed_Patient_DrugAllergy map[int]struct{}
	done                        bool
	oldValue                    func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the Patient_Name field.
func (m *PatientMutation) SetPatientName(s string) {
	m._Patient_Name = &s
}

// PatientName returns the Patient_Name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._Patient_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old Patient_Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "Patient_Name" field.
func (m *PatientMutation) ResetPatientName() {
	m._Patient_Name = nil
}

// AddPatientDrugAllergyIDs adds the Patient_DrugAllergy edge to DrugAllergy by ids.
func (m *PatientMutation) AddPatientDrugAllergyIDs(ids ...int) {
	if m._Patient_DrugAllergy == nil {
		m._Patient_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m._Patient_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemovePatientDrugAllergyIDs removes the Patient_DrugAllergy edge to DrugAllergy by ids.
func (m *PatientMutation) RemovePatientDrugAllergyIDs(ids ...int) {
	if m.removed_Patient_DrugAllergy == nil {
		m.removed_Patient_DrugAllergy = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Patient_DrugAllergy[ids[i]] = struct{}{}
	}
}

// RemovedPatientDrugAllergy returns the removed ids of Patient_DrugAllergy.
func (m *PatientMutation) RemovedPatientDrugAllergyIDs() (ids []int) {
	for id := range m.removed_Patient_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// PatientDrugAllergyIDs returns the Patient_DrugAllergy ids in the mutation.
func (m *PatientMutation) PatientDrugAllergyIDs() (ids []int) {
	for id := range m._Patient_DrugAllergy {
		ids = append(ids, id)
	}
	return
}

// ResetPatientDrugAllergy reset all changes of the "Patient_DrugAllergy" edge.
func (m *PatientMutation) ResetPatientDrugAllergy() {
	m._Patient_DrugAllergy = nil
	m.removed_Patient_DrugAllergy = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Patient_Name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Patient_DrugAllergy != nil {
		edges = append(edges, patient.EdgePatientDrugAllergy)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDrugAllergy:
		ids := make([]ent.Value, 0, len(m._Patient_DrugAllergy))
		for id := range m._Patient_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Patient_DrugAllergy != nil {
		edges = append(edges, patient.EdgePatientDrugAllergy)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientDrugAllergy:
		ids := make([]ent.Value, 0, len(m.removed_Patient_DrugAllergy))
		for id := range m.removed_Patient_DrugAllergy {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatientDrugAllergy:
		m.ResetPatientDrugAllergy()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}
