/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersDrugAllergy,
    ControllersDrugAllergyFromJSON,
    ControllersDrugAllergyToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntDrugAllergy,
    EntDrugAllergyFromJSON,
    EntDrugAllergyToJSON,
    EntManner,
    EntMannerFromJSON,
    EntMannerToJSON,
    EntMedicine,
    EntMedicineFromJSON,
    EntMedicineToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
} from '../models';

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateDrugAllergyRequest {
    drugallergy: ControllersDrugAllergy;
}

export interface CreateMannerRequest {
    manner: EntManner;
}

export interface CreateMedicineRequest {
    medicine: EntMedicine;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteDrugAllergyRequest {
    id: number;
}

export interface DeleteMannerRequest {
    id: number;
}

export interface DeleteMedicineRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetDrugAllergyRequest {
    id: number;
}

export interface GetMannerRequest {
    id: number;
}

export interface GetMedicineRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListDrugAllergyRequest {
    limit?: number;
    offset?: number;
}

export interface ListMannerRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicineRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateDrugAllergyRequest {
    id: number;
    drugAllergy: EntDrugAllergy;
}

export interface UpdateMannerRequest {
    id: number;
    manner: EntManner;
}

export interface UpdateMedicineRequest {
    id: number;
    medicine: EntMedicine;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create drugAllergy
     * Create drugAllergy
     */
    async createDrugAllergyRaw(requestParameters: CreateDrugAllergyRequest): Promise<runtime.ApiResponse<EntDrugAllergy>> {
        if (requestParameters.drugallergy === null || requestParameters.drugallergy === undefined) {
            throw new runtime.RequiredError('drugallergy','Required parameter requestParameters.drugallergy was null or undefined when calling createDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugAllergys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersDrugAllergyToJSON(requestParameters.drugallergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugAllergyFromJSON(jsonValue));
    }

    /**
     * Create drugAllergy
     * Create drugAllergy
     */
    async createDrugAllergy(requestParameters: CreateDrugAllergyRequest): Promise<EntDrugAllergy> {
        const response = await this.createDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create manner
     * Create manner
     */
    async createMannerRaw(requestParameters: CreateMannerRequest): Promise<runtime.ApiResponse<EntManner>> {
        if (requestParameters.manner === null || requestParameters.manner === undefined) {
            throw new runtime.RequiredError('manner','Required parameter requestParameters.manner was null or undefined when calling createManner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMannerToJSON(requestParameters.manner),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMannerFromJSON(jsonValue));
    }

    /**
     * Create manner
     * Create manner
     */
    async createManner(requestParameters: CreateMannerRequest): Promise<EntManner> {
        const response = await this.createMannerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicine
     * Create medicine
     */
    async createMedicineRaw(requestParameters: CreateMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.medicine === null || requestParameters.medicine === undefined) {
            throw new runtime.RequiredError('medicine','Required parameter requestParameters.medicine was null or undefined when calling createMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineToJSON(requestParameters.medicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * Create medicine
     * Create medicine
     */
    async createMedicine(requestParameters: CreateMedicineRequest): Promise<EntMedicine> {
        const response = await this.createMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drugAllergy by ID
     * Delete a drugAllergy entity by ID
     */
    async deleteDrugAllergyRaw(requestParameters: DeleteDrugAllergyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugAllergys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get drugAllergy by ID
     * Delete a drugAllergy entity by ID
     */
    async deleteDrugAllergy(requestParameters: DeleteDrugAllergyRequest): Promise<object> {
        const response = await this.deleteDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manner by ID
     * Delete a manner entity by ID
     */
    async deleteMannerRaw(requestParameters: DeleteMannerRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteManner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get manner by ID
     * Delete a manner entity by ID
     */
    async deleteManner(requestParameters: DeleteMannerRequest): Promise<object> {
        const response = await this.deleteMannerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicine by ID
     * Delete a medicine entity by ID
     */
    async deleteMedicineRaw(requestParameters: DeleteMedicineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medicine by ID
     * Delete a medicine entity by ID
     */
    async deleteMedicine(requestParameters: DeleteMedicineRequest): Promise<object> {
        const response = await this.deleteMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drugAllergy by ID
     * Get a drugAllergy entity by ID
     */
    async getDrugAllergyRaw(requestParameters: GetDrugAllergyRequest): Promise<runtime.ApiResponse<EntDrugAllergy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugAllergys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugAllergyFromJSON(jsonValue));
    }

    /**
     * get drugAllergy by ID
     * Get a drugAllergy entity by ID
     */
    async getDrugAllergy(requestParameters: GetDrugAllergyRequest): Promise<EntDrugAllergy> {
        const response = await this.getDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get manner by ID
     * Get a manner entity by ID
     */
    async getMannerRaw(requestParameters: GetMannerRequest): Promise<runtime.ApiResponse<EntManner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getManner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMannerFromJSON(jsonValue));
    }

    /**
     * get manner by ID
     * Get a manner entity by ID
     */
    async getManner(requestParameters: GetMannerRequest): Promise<EntManner> {
        const response = await this.getMannerRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicine by ID
     * Get a medicine entity by ID
     */
    async getMedicineRaw(requestParameters: GetMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * get medicine by ID
     * Get a medicine entity by ID
     */
    async getMedicine(requestParameters: GetMedicineRequest): Promise<EntMedicine> {
        const response = await this.getMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drugAllergy entities
     * List drugAllergy entities
     */
    async listDrugAllergyRaw(requestParameters: ListDrugAllergyRequest): Promise<runtime.ApiResponse<Array<EntDrugAllergy>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugAllergys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugAllergyFromJSON));
    }

    /**
     * list drugAllergy entities
     * List drugAllergy entities
     */
    async listDrugAllergy(requestParameters: ListDrugAllergyRequest): Promise<Array<EntDrugAllergy>> {
        const response = await this.listDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list manner entities
     * List manner entities
     */
    async listMannerRaw(requestParameters: ListMannerRequest): Promise<runtime.ApiResponse<Array<EntManner>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/manners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMannerFromJSON));
    }

    /**
     * list manner entities
     * List manner entities
     */
    async listManner(requestParameters: ListMannerRequest): Promise<Array<EntManner>> {
        const response = await this.listMannerRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicine entities
     * List medicine entities
     */
    async listMedicineRaw(requestParameters: ListMedicineRequest): Promise<runtime.ApiResponse<Array<EntMedicine>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicineFromJSON));
    }

    /**
     * list medicine entities
     * List medicine entities
     */
    async listMedicine(requestParameters: ListMedicineRequest): Promise<Array<EntMedicine>> {
        const response = await this.listMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update drugAllergy by ID
     * Update a drugAllergy entity by ID
     */
    async updateDrugAllergyRaw(requestParameters: UpdateDrugAllergyRequest): Promise<runtime.ApiResponse<EntDrugAllergy>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDrugAllergy.');
        }

        if (requestParameters.drugAllergy === null || requestParameters.drugAllergy === undefined) {
            throw new runtime.RequiredError('drugAllergy','Required parameter requestParameters.drugAllergy was null or undefined when calling updateDrugAllergy.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugAllergys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugAllergyToJSON(requestParameters.drugAllergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugAllergyFromJSON(jsonValue));
    }

    /**
     * update drugAllergy by ID
     * Update a drugAllergy entity by ID
     */
    async updateDrugAllergy(requestParameters: UpdateDrugAllergyRequest): Promise<EntDrugAllergy> {
        const response = await this.updateDrugAllergyRaw(requestParameters);
        return await response.value();
    }

    /**
     * update manner by ID
     * Update a manner entity by ID
     */
    async updateMannerRaw(requestParameters: UpdateMannerRequest): Promise<runtime.ApiResponse<EntManner>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateManner.');
        }

        if (requestParameters.manner === null || requestParameters.manner === undefined) {
            throw new runtime.RequiredError('manner','Required parameter requestParameters.manner was null or undefined when calling updateManner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/manners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMannerToJSON(requestParameters.manner),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMannerFromJSON(jsonValue));
    }

    /**
     * update manner by ID
     * Update a manner entity by ID
     */
    async updateManner(requestParameters: UpdateMannerRequest): Promise<EntManner> {
        const response = await this.updateMannerRaw(requestParameters);
        return await response.value();
    }

    /**
     * update medicine by ID
     * Update a medicine entity by ID
     */
    async updateMedicineRaw(requestParameters: UpdateMedicineRequest): Promise<runtime.ApiResponse<EntMedicine>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedicine.');
        }

        if (requestParameters.medicine === null || requestParameters.medicine === undefined) {
            throw new runtime.RequiredError('medicine','Required parameter requestParameters.medicine was null or undefined when calling updateMedicine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicineToJSON(requestParameters.medicine),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicineFromJSON(jsonValue));
    }

    /**
     * update medicine by ID
     * Update a medicine entity by ID
     */
    async updateMedicine(requestParameters: UpdateMedicineRequest): Promise<EntMedicine> {
        const response = await this.updateMedicineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

}
